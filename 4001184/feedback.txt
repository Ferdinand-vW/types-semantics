Exercise 1:
Perfect
1 pt

Exercise 2:
Used explicit recursion in madd, but also correct. Model solution may be more elegant since it doesn't use explicit recursion or case splits. 
Transpose is correct, but very explicit and uses helper function (tail). Model solution more elegant.
1 pt

Exercise 3:
Plan function technically correct, but it uses two unneeded helper functions. Model solution much more elegant.
1 pt

Exercise 4:
Difference should return "Succ k" instead of "k" in both nontrivial cases.
0.5 pt (due to difference) 

Exercise 5:
Distributivity proof messy and doesn't load properly. After fixing notation (replacing the _ with ".(m + k)") it loads and appears to be correct. Model solution still a lot less messy though. 
0.75 pt (due to not loading)

Exercise 6:
The Drop Drop case of SubListTrans uses unneeded double recursion and a call to SubListRefl that I don't understand, but it appears to be correct. The model solution is a lot less messy, and simply the line "Drop (SubListTrans (Drop sub1) sub2)" would have been correct and elegant as well.
Reduction ad adsurdum redefined even though it is in the Prelude (called "magic"). 
Impossible found in a less general way than the model solution does, but this wasn't required for the exercise. 
SubListAntiSym uses more helper functions than it does in the model solution, but it is still correct. This solution might be more elegant than model solution since it doesn't need to case match on sub2. 
1 pt

Exercise 7:
Perfect
1 pt

Exercise 8:
Seems correct, but the model solution does not provide a solution to this exercise, so I cannot be sure. 
1 pt

Exercise 9:
Change to Cmd and Stack types done correctly.
Compile appears to add one ADD too many, compared to the model solution.
Correctness proof not done. 
0.25 pt (due to compile and lack of correctness proof)

8.5 total

---------------------------------------------------------------------------------------------------------------------------------------------------------
Assignment 2:

Determinism & uniqueness of normal forms proofs (1):
Deterministic primarily pattern matched on steps instead of terms (as was done in model solution), but since possible steps depend on the value of terms, both are correct.
Contradictions there are handled differently from model solution, but also correct.
The IsZero IsZero case is handled using cong with a recursive call, instead of a regular recursive call (using with) which would have sufficed. Still correct though.
Uonf done correctly, although the contradictions are different (more extensive) again. Simply handing a normal form the proof that what it's about reduces is enough. 
Points: 1

Definition of big step semantics (1):
Mostly identical to model solution, except the model solution uses the (previously undefined) function vsucc, while this solution inlined the definition of that function. 
Points: 1

Big-to-small and small-to-big lemmas (1 + 1):
Bts is correct, but inconsistent. The E-If-Steps functions is a stand-alone function, while the similar E-Succ-Steps is inline. This way, E-iszero-Steps cannot be used in the second case of iszero, which is now handles by a rather messy local function. This also uses isValueComplete, which is a proof function instead of a conversion function (using it is OK, but not 'nice'). 
Value-to-value function makes type parameter explicit, which seems unneeded. Also uses a local helper function which could have been replaced with a with-clause (which I think is more elegant). Still correct.
Stb not as elegant as it is in the model solution, it seems correct.
Points: 2

Soundness and completeness of big-step semantics (1 + 1):
Not implemented.
Points: 0

Small step semantics, big step semantics and denotational semantics of pairs (1.5):
Not implemented.
Points: 0

Updating existing proofs to handle pairs (1.5):
Not implemented.
Points: 0

Total: 5