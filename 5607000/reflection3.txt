# Part I

The base implementation follows the type rules in the slides and makes use of the
explicit sub-effecting rule which is invoked at those recursive positions where
poisoning could occur. Unification still equates annotation variables, but doing
anything else there is unnecessary, since subeffecting takes place before unification.
The fact that poisoning is indeed prevented in most cases is demonstrated by the examples.

Examples: 0.5
Docs:     0.5
Code:     2.5

# Part II

Rules for pairs have been formalized, documented and implemented.
Examples demonstrate that they are working correctly.

Examples: 0.5
Docs:     0.5
Code:     1.0

# Part III

Rules for pairs have been formalized, documented and implemented.
Examples demonstrate that they are working correctly.

Examples: 0.5
Docs:     0.5
Code:     1.5

# Part IV

My generalized type-rules fully generalize the previous rules for pairs and lists,
but they contain a small informal part describing how to deal with nested annotations.

Score: 0.9

# Readability

The PDF file explains all examples and type rules. The implementation is written in a way
that hides the complexity of substitutions in most parts of the algorithm.
Furthermore, a lot of boilerplate code has been avoided by using lens for traversing data
structures.
That said, I should have added documentation about the general structure of the project and
the implementation of the algorithm, which might not be immediately clear for readers.

Score: 0.8

# Score

Score for:
(i)        : 3.5
(ii)       : 2.0
(iii)      : 2.5
(iv)       : 0.9
Readability: 0.8
Bonus      : 0
------------------
Total score: 9.7
(between 0 and 11)

